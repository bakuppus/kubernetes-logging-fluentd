apiVersion: v1
kind: Template
metadata:
  name: kubernetes-logging-fluentd

parameters:
- name: NAME
  displayName: Application name
  value: logging-fluentd
  required: true

- name: MONGODB_SERVICE_NAME
  displayName: MongoDB Service name
  value: logging-fluentd-mongodb
  required: true

- name: MONGODB_PORT
  displayName: MongoDB port
  value: "27017"
  required: true

- name: MONGODB_USER
  displayName: MongoDB user
  from: user[A-Z0-9]{3}
  generate: expression
  required: true

- name: MONGODB_PASSWORD
  displayName: MongoDB password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  required: true

- name: MONGODB_DATABASE
  displayName: MongoDB database name
  required: true
  value: logging

- name: MONGODB_COLLECTION
  displayName: MongoDB collection name
  required: true
  value: logs

- name: MONGODB_ADMIN_PASSWORD
  displayName: MongoDB admin password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  required: true

- name: VOLUME_CAPACITY
  displayName: Tamanho do Volume de dados
  required: true
  value: "100Gi"

objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app: ${NAME}
    name: logging-fluentd

- apiVersion: extensions/v1beta1
  kind: DaemonSet
  metadata:
    labels:
      app: ${NAME}
    name: ${NAME}
  spec:
    selector:
      matchLabels:
        logging: ${NAME}
    template:
      metadata:
        labels:
          logging: ${NAME}
        name: ${NAME}
      spec:
        containers:
        - name: fluentd
          env:
          - name: K8S_HOST_URL
            value: "https://kubernetes.default.svc.cluster.local"
          - name: USE_JOURNAL
            value: "false"
          - name: MONGODB_HOSTNAME
            value: "${MONGODB_SERVICE_NAME}"
          - name: MONGODB_PORT
            value: "${MONGODB_PORT}"
          - name: MONGODB_DATABASE
            value: "${MONGODB_DATABASE}"
          - name: MONGODB_COLLECTION
            value: "${MONGODB_COLLECTION}"
          - name: MONGODB_USERNAME
            value: "${MONGODB_USER}"
          - name: MONGODB_PASSWORD
            value: "${MONGODB_PASSWORD}"
          image: caruccio/logging-fluentd:latest
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 100m
              memory: 512Mi
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /run/log/journal
            name: runlogjournal
          - mountPath: /var/log
            name: varlog
          - mountPath: /var/lib/docker/containers
            name: varlibdockercontainers
            readOnly: true
          - mountPath: /etc/docker-hostname
            name: dockerhostname
            readOnly: true
          - mountPath: /etc/localtime
            name: localtime
            readOnly: true
          - mountPath: /etc/sysconfig/docker
            name: dockercfg
            readOnly: true
        #nodeSelector:
        #  role: "worker"
        serviceAccount: logging-fluentd
        serviceAccountName: logging-fluentd
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - hostPath:
            path: /run/log/journal
          name: runlogjournal
        - hostPath:
            path: /var/log
          name: varlog
        - hostPath:
            path: /var/lib/docker/containers
          name: varlibdockercontainers
        - hostPath:
            path: /etc/hostname
          name: dockerhostname
        - hostPath:
            path: /etc/localtime
          name: localtime
        - hostPath:
            path: /etc/sysconfig/docker
          name: dockercfg

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${NAME}
    name: ${MONGODB_SERVICE_NAME}
  spec:
    ports:
    - name: mongo
      port: ${MONGODB_PORT}
      protocol: TCP
      targetPort: 27017
    selector:
      app: ${NAME}
      name: ${MONGODB_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: ${NAME}
    name: ${MONGODB_SERVICE_NAME}-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}

- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    annotations:
      iconClass: icon-mongodb
      tags: database,mongodb
    labels:
      app: ${NAME}
      name: ${MONGODB_SERVICE_NAME}
    name: ${MONGODB_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${NAME}
        name: ${MONGODB_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${NAME}
          name: ${MONGODB_SERVICE_NAME}
      spec:
        containers:
        - name: mongodb
          env:
          - name: MONGODB_USER
            value: ${MONGODB_USER}
          - name: MONGODB_PASSWORD
            value: ${MONGODB_PASSWORD}
          - name: MONGODB_DATABASE
            value: ${MONGODB_DATABASE}
          - name: MONGODB_ADMIN_PASSWORD
            value: ${MONGODB_ADMIN_PASSWORD}
          image: centos/mongodb-32-centos7:latest
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 300m
              memory: 1Gi
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            initialDelaySeconds: 5
            timeoutSeconds: 2
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: ${MONGODB_SERVICE_NAME}-data
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${MONGODB_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${MONGODB_SERVICE_NAME}-data
